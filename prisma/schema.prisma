// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  displayName String
  
  // Profile details
  bio         String?
  location    String?
  hobbies     String?  // JSON string of array
  interests   String?  // JSON string of array
  avatar      String?
  
  // System fields
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  services    Service[]
  bookings    Booking[] @relation("BookingRequester")
  reviews     Review[]  @relation("ReviewAuthor")
  receivedReviews Review[] @relation("ReviewTarget")
  
  @@map("users")
}

model Service {
  id              String   @id @default(cuid())
  providerId      String
  title           String
  description     String
  category        String   // consultation, coaching, tutoring, etc.
  
  // Scheduling - now uses availability slots
  availabilitySlots String // JSON string of weekly schedule
  duration        Int      // minutes per session
  
  // Pricing & Location
  price           Float
  location        String   // online, phone, in-person
  
  // Status
  isActive        Boolean  @default(true)
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  provider        User     @relation(fields: [providerId], references: [id], onDelete: Cascade)
  bookings        Booking[]
  sessions        BookedSession[] @relation("ServiceSessions")
  
  @@map("services")
}

// For actual booked sessions
model BookedSession {
  id          String   @id @default(cuid())
  serviceId   String
  bookingId   String
  
  // Specific session details
  date        String   // YYYY-MM-DD format
  time        String   // HH:MM format
  duration    Int      // minutes
  
  // Status
  status      String   @default("scheduled") // scheduled, completed, cancelled
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  service     Service  @relation("ServiceSessions", fields: [serviceId], references: [id], onDelete: Cascade)
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  @@map("booked_sessions")
}

model Booking {
  id            String   @id @default(cuid())
  serviceId     String
  requesterId   String
  
  // Message
  message       String
  
  // Status tracking
  status        String   @default("pending") // pending, confirmed, declined, cancelled, completed
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  confirmedAt   DateTime?
  declinedAt    DateTime?
  cancelledAt   DateTime?
  completedAt   DateTime?
  
  // Relations
  service       Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  requester     User     @relation("BookingRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  sessions      BookedSession[]
  
  @@map("bookings")
}

model Review {
  id          String   @id @default(cuid())
  authorId    String
  targetId    String
  bookingId   String?  // Optional reference to booking
  
  // Review content
  rating      Int      // 1-5 stars
  comment     String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  author      User     @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  target      User     @relation("ReviewTarget", fields: [targetId], references: [id], onDelete: Cascade)
  
  @@map("reviews")
}
