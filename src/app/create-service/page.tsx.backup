'use client';

import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { ArrowLeft, Clock, DollarSign, MapPin, Tag, FileText } from 'lucide-react';
import { z } from 'zod';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useAuthStore } from '@/stores/auth';
import { getSlotCategoryEmoji, getLocationIcon } from '@/lib/utils';
import WeeklyScheduleGrid from '@/components/WeeklyScheduleGrid';
import { supabase } from '@/lib/supabase';

// Updated schema for service with weekly schedule
const serviceSchema = z.object({
  title: z.string().min(5, 'Title must be at least 5 characters'),
  description: z.string().min(20, 'Description must be at least 20 characters'),
  category: z.enum(['consultation', 'coaching', 'tutoring', 'fitness', 'creative', 'other']),
  duration: z.number().min(15).max(480), // 15 minutes to 8 hours
  price: z.number().min(0).max(10000),
  location: z.enum(['online', 'phone', 'in-person']),
});

type ServiceFormData = z.infer<typeof serviceSchema>;

const categories = [
  { value: 'consultation', label: 'Consultation', emoji: 'üí°' },
  { value: 'coaching', label: 'Coaching', emoji: 'üéØ' },
  { value: 'tutoring', label: 'Tutoring', emoji: 'üìö' },
  { value: 'fitness', label: 'Fitness', emoji: 'üí™' },
  { value: 'creative', label: 'Creative', emoji: 'üé®' },
  { value: 'other', label: 'Other', emoji: '‚ö°' },
];

const locations = [
  { value: 'online', label: 'Online', icon: 'üíª' },
  { value: 'phone', label: 'Phone', icon: 'üìû' },
  { value: 'in-person', label: 'In-Person', icon: 'üìç' },
];

export default function CreateServicePage() {
  const { user, isAuthenticated } = useAuthStore();
  const router = useRouter();
  const [availabilitySlots, setAvailabilitySlots] = useState<Record<string, string[]>>({});
  const [isLoading, setIsLoading] = useState(false);
  
  const form = useForm<ServiceFormData>({
    resolver: zodResolver(serviceSchema),
    defaultValues: {
      title: '',
      description: '',
      category: 'consultation',
      duration: 60,
      price: 50,
      location: 'online',
    },
  });

  const handleSubmit = async (data: ServiceFormData) => {
    if (!isAuthenticated || !user) {
      router.push('/auth');
      return;
    }

    if (Object.keys(availabilitySlots).length === 0) {
      alert('Please select at least one availability slot');
      return;
    }
    
    setIsLoading(true);
    try {
      // Create service directly with Supabase
      const { data: service, error } = await supabase
        .from('services')
        .insert({
          title: data.title,
          description: data.description,
          category: data.category,
          duration: data.duration,
          price: data.price,
          location: data.location,
          provider_id: user.id,
          availability_slots: JSON.stringify(availabilitySlots),
          is_active: true,
        })
        .select()
        .single();

      if (error) {
        console.error('Supabase error:', error);
        alert(error.message || 'Failed to create service');
        return;
      }

      // Success!
      form.reset();
      setAvailabilitySlots({});
      router.push('/dashboard');
    } catch (error) {
      console.error('Failed to create service:', error);
      alert('Failed to create service. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const getTotalSlots = () => {
    return Object.values(availabilitySlots).reduce((total, daySlots) => total + daySlots.length, 0);
  };

  // Redirect to auth if not authenticated
  React.useEffect(() => {
    if (!isAuthenticated) {
      router.push('/auth');
    }
  }, [isAuthenticated, router]);

  if (!isAuthenticated) {
    return null;
  }

  return (
    <div className="bento-container">
      {/* Main Content */}
      <div className="bento-main">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold mb-2" style={{ color: 'var(--text-primary)' }}>Create New Service</h1>
            <p style={{ color: 'var(--text-secondary)' }}>Set up your service details and availability</p>
          </div>
          
          <Link href="/dashboard" className="bento-button-secondary">
            <ArrowLeft className="w-4 h-4" />
            Back to Dashboard
          </Link>
        </div>

        <form onSubmit={form.handleSubmit(handleSubmit)}>
          <div className="space-y-8">
            {/* Service Details */}
            <div className="bento-card">
              <h3 className="text-lg font-semibold mb-6" style={{ color: 'var(--text-primary)' }}>Service Details</h3>
              
              <div className="space-y-6">
              {/* Service Title */}
              <div>
                <label className="block text-sm font-medium mb-2" style={{ color: 'var(--text-primary)' }}>
                  <Tag className="inline w-4 h-4 mr-1" />
                  Service Title
                </label>
                <input
                  {...form.register('title')}
                  type="text"
                  placeholder="e.g., JavaScript Programming Fundamentals"
                  className="bento-input"
                />
                {form.formState.errors.title && (
                  <p className="mt-1 text-sm" style={{ color: 'var(--error)' }}>{form.formState.errors.title.message}</p>
                )}
              </div>

              {/* Description */}
              <div>
                <label className="block text-sm font-medium mb-2" style={{ color: 'var(--text-primary)' }}>
                  <FileText className="inline w-4 h-4 mr-1" />
                  Description
                </label>
                <textarea
                  {...form.register('description')}
                  rows={4}
                  placeholder="Describe what you'll cover, who it's for, and what participants will learn..."
                  className="bento-input resize-none"
                />
                {form.formState.errors.description && (
                  <p className="mt-1 text-sm" style={{ color: 'var(--error)' }}>{form.formState.errors.description.message}</p>
                )}
              </div>

              {/* Category & Location */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-2" style={{ color: 'var(--text-primary)' }}>
                    Category
                  </label>
                  <select
                    {...form.register('category')}
                    className="bento-input appearance-none"
                  >
                    {categories.map((category) => (
                      <option key={category.value} value={category.value}>
                        {category.emoji} {category.label}
                      </option>
                    ))}
                  </select>
                  {form.formState.errors.category && (
                    <p className="mt-1 text-sm" style={{ color: 'var(--error)' }}>{form.formState.errors.category.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2" style={{ color: 'var(--text-primary)' }}>
                    <MapPin className="inline w-4 h-4 mr-1" />
                    Location Type
                  </label>
                  <select
                    {...form.register('location')}
                    className="bento-input appearance-none"
                  >
                    {locations.map((location) => (
                      <option key={location.value} value={location.value}>
                        {location.icon} {location.label}
                      </option>
                    ))}
                  </select>
                  {form.formState.errors.location && (
                    <p className="mt-1 text-sm" style={{ color: 'var(--error)' }}>{form.formState.errors.location.message}</p>
                  )}
                </div>
              </div>

              {/* Duration & Price */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-2" style={{ color: 'var(--text-primary)' }}>
                    <Clock className="inline w-4 h-4 mr-1" />
                    Session Duration
                  </label>
                  <select
                    {...form.register('duration', { valueAsNumber: true })}
                    className="bento-input appearance-none"
                  >
                    <option value={15}>15 minutes</option>
                    <option value={30}>30 minutes</option>
                    <option value={45}>45 minutes</option>
                    <option value={60}>1 hour</option>
                    <option value={90}>1.5 hours</option>
                    <option value={120}>2 hours</option>
                    <option value={180}>3 hours</option>
                    <option value={240}>4 hours</option>
                  </select>
                  {form.formState.errors.duration && (
                    <p className="mt-1 text-sm" style={{ color: 'var(--error)' }}>{form.formState.errors.duration.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2" style={{ color: 'var(--text-primary)' }}>
                    <DollarSign className="inline w-4 h-4 mr-1" />
                    Price per Session
                  </label>
                  <input
                    {...form.register('price', { valueAsNumber: true })}
                    type="number"
                    min="0"
                    max="10000"
                    placeholder="50.00"
                    className="bento-input"
                  />
                  {form.formState.errors.price && (
                    <p className="mt-1 text-sm" style={{ color: 'var(--error)' }}>{form.formState.errors.price.message}</p>
                  )}
                </div>
              </div>

              {/* Preview */}
              {form.watch('title') && (
                <div className="rounded-xl p-4" style={{ backgroundColor: 'var(--bg-secondary)', border: '1px solid var(--border-primary)' }}>
                  <h3 className="text-sm font-medium mb-2" style={{ color: 'var(--text-primary)' }}>Preview:</h3>
                  <div className="bento-card">
                    <div className="flex items-center mb-2">
                      <span className="text-xl mr-2">{getSlotCategoryEmoji(form.watch('category'))}</span>
                      <h4 className="font-semibold" style={{ color: 'var(--text-primary)' }}>{form.watch('title')}</h4>
                    </div>
                    <p className="text-sm mb-2" style={{ color: 'var(--text-secondary)' }}>{form.watch('description')}</p>
                    <div className="flex items-center justify-between text-xs" style={{ color: 'var(--text-tertiary)' }}>
                      <span>{form.watch('duration')} min ‚Ä¢ {getLocationIcon(form.watch('location'))} {form.watch('location')}</span>
                      <span className="font-semibold" style={{ color: 'var(--success)' }}>${form.watch('price')}</span>
                    </div>
                    {getTotalSlots() > 0 && (
                      <div className="mt-2 text-xs" style={{ color: 'var(--accent-primary)' }}>
                        {getTotalSlots()} availability slots selected
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>

            {/* Availability Schedule */}
            <div className="bento-card">
              <WeeklyScheduleGrid
                selectedSlots={availabilitySlots}
                onSlotsChange={setAvailabilitySlots}
              />
            </div>
          </div>

          {/* Form Actions */}
          <div className="flex gap-4 pt-8">
            <Link
              href="/dashboard"
              className="bento-button-secondary flex-1 justify-center"
            >
              Cancel
            </Link>
            <button
              type="submit"
              disabled={isLoading || !form.formState.isValid || getTotalSlots() === 0}
              className="bento-button flex-1 justify-center disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? 'Creating...' : `Create Service (${getTotalSlots()} slots)`}
            </button>
          </div>
        </form>
      </div>
      
      {/* Sidebar */}
      <div className="bento-sidebar">
        <div className="text-center mb-6">
          <div className="w-16 h-16 rounded-full mx-auto mb-4 flex items-center justify-center" 
               style={{ backgroundColor: 'var(--bg-secondary)' }}>
            <Tag className="w-8 h-8" style={{ color: 'var(--accent-primary)' }} />
          </div>
          <h3 className="text-xl font-semibold mb-2" style={{ color: 'var(--text-primary)' }}>
            Create Service
          </h3>
          <p style={{ color: 'var(--text-secondary)' }}>
            Share your expertise with the community
          </p>
        </div>

        <div className="space-y-6">
          <div className="flex items-start gap-3">
            <div className="w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0" 
                 style={{ backgroundColor: 'var(--bg-secondary)' }}>
              <FileText className="w-4 h-4" style={{ color: 'var(--accent-primary)' }} />
            </div>
            <div>
              <h4 className="font-medium mb-1" style={{ color: 'var(--text-primary)' }}>
                Service Details
              </h4>
              <p className="text-sm" style={{ color: 'var(--text-secondary)' }}>
                Provide clear title and description for your service
              </p>
            </div>
          </div>

          <div className="flex items-start gap-3">
            <div className="w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0" 
                 style={{ backgroundColor: 'var(--bg-secondary)' }}>
              <Clock className="w-4 h-4" style={{ color: 'var(--success)' }} />
            </div>
            <div>
              <h4 className="font-medium mb-1" style={{ color: 'var(--text-primary)' }}>
                Set Availability
              </h4>
              <p className="text-sm" style={{ color: 'var(--text-secondary)' }}>
                Choose time slots when you're available
              </p>
            </div>
          </div>

          <div className="flex items-start gap-3">
            <div className="w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0" 
                 style={{ backgroundColor: 'var(--bg-secondary)' }}>
              <DollarSign className="w-4 h-4" style={{ color: 'var(--warning)' }} />
            </div>
            <div>
              <h4 className="font-medium mb-1" style={{ color: 'var(--text-primary)' }}>
                Price Your Service
              </h4>
              <p className="text-sm" style={{ color: 'var(--text-secondary)' }}>
                Set a fair price that reflects your expertise
              </p>
            </div>
          </div>
        </div>

        <div className="mt-8 p-4 rounded-lg" style={{ backgroundColor: 'var(--bg-secondary)' }}>
          <h4 className="font-medium mb-2" style={{ color: 'var(--text-primary)' }}>Tips for Success</h4>
          <ul className="text-sm space-y-1" style={{ color: 'var(--text-secondary)' }}>
            <li>‚Ä¢ Write detailed descriptions</li>
            <li>‚Ä¢ Set competitive pricing</li>
            <li>‚Ä¢ Offer flexible time slots</li>
            <li>‚Ä¢ Respond quickly to requests</li>
          </ul>
        </div>
      </div>
    </div>
  );
}